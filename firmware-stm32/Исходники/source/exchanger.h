#ifndef _EXCHANGER_H_
#define _EXCHANGER_H_

#include "stdlib.h"
#include "stdint.h"
#include "stdbool.h"


#define FEND             (0xC0)  // Frame End
#define FESC             (0xDB)  // Frame Escape
#define TFEND            (0xDC)  // Transposed Frame End
#define TFESC            (0xDD)  // Transposed Frame Escape 


//*********************************************************
// Работа с протоколом обмена 
//*********************************************************
#define PACK_CODE_INDEX  		(0)
#define PACK_SIZE_LOW_INDEX  		(1)
#define PACK_SIZE_HIGH_INDEX  		(2)
#define PACK_COUNTER_LOW_INDEX  	(3)
#define PACK_COUNTER_HIGH_INDEX  	(4)
#define PACK_DATA_INDEX  	        (5)
//*********************************************************

//*************************************************************************************
// Вспомогательная структура для управления дестафингом полученного по USB пакета
//*************************************************************************************
__packed typedef struct 
{
  bool isPackStartMarker;	// маркер начала пакета
  bool isFrameMarker;		// маркер стафинга
  uint32_t recvCount;		// количество принятых байт
  uint32_t in_hash;		// контрольная сумма рассчитаная при приеме
  uint32_t pack_size;		// размер пакета (определяется после получения заголовка)
}STAFFING_RESTORER;


//******************************************************************************
// Заголовок пакета
//******************************************************************************
__packed typedef struct{ 
  uint8_t code;                 // код запроса
  uint8_t length[2];            // длина данных
  uint8_t unique[2];            // уникальное число пакет 
} HEADER;
//******************************************************************************


//******************************************************************************
// код запроса от программы
//******************************************************************************
enum{
  RESERVE,                      // резерв
  INIT,                         // запрос о инициализации
  REPORT,                    // получить запрос
  STATE,                        // запрос о состоянии
}REQUEST;
//******************************************************************************


//******************************************************************************
// код ответа на запросы от программы
//******************************************************************************
enum{
  POSITIVE,                     // запрос выполнен
  NEGATIVE                      // запрос не выполнен
} RESPONSE;
//******************************************************************************

//*************************************************************************************
// Макрос сброса состояния вспомогательной структуры
//*************************************************************************************
#define RESET_STAFFING_RESTORER(recv)						\
{										\
  recv.pack_size 		= PACK_MIN_SIZE;				\
  recv.recvCount 		= 0;						\
  recv.in_hash    		= PACK_SUM_START;				\
  recv.isPackStartMarker= false;						\
  recv.isFrameMarker 	= false;         					\
}
//*************************************************************************************

__packed typedef uint8_t CHECKSUM[4];
#define PACK_HEADER_SIZE        sizeof(HEADER)
#define PACK_HASH_SIZE          sizeof(CHECKSUM)
#define PACK_MIN_SIZE           (PACK_HEADER_SIZE + PACK_HASH_SIZE)
#define PACK_SUM_START          (0xFFFFFFFF)



#endif // _EXCHANGER_H_
